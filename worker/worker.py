# File: main_worker.py
# Description: This is the main entry point for the RabbitMQ worker.
# It handles message consumption and calls functions from other modules to perform tasks.

import pika
import json
from ssh_handler import ssh_connect_and_run
from db_handler import save_to_mongo
from parser_handler import parse_output_with_textfsm
import os, time

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Configuration) ---
RABBITMQ_HOST = os.environ.get("RABBITMQ_HOST")
RABBITMQ_QUEUE = 'router_jobs'
TEXTFSM_TEMPLATE = 'cisco_ios_show_ip_interface_brief.textfsm'

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RabbitMQ ---

def on_message_callback(ch, method, properties, body):
    """
    This function is called whenever a message is received from the RabbitMQ queue.
    It orchestrates the entire automation process.
    """
    print(f"üì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {body.decode()}")
    
    try:
        # 1. Decode and parse the JSON message body
        message_data = json.loads(body.decode())
        
        ip = message_data.get('ip')
        username = message_data.get('username')
        password = message_data.get('password')
        command = "show ip interface brief"  # The command to execute
        
        if not all([ip, username, password]):
            print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°. ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 'ip', 'username', 'password'.")
            ch.basic_ack(delivery_tag=method.delivery_tag)
            return

        # 2. SSH to the device and get command output
        command_output = ssh_connect_and_run(ip, username, password, command)
        
        if not command_output:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•.")
            ch.basic_ack(delivery_tag=method.delivery_tag)
            return

        print(f"Received job for router {ip}")
        print(command_output)

        # 3. Parse the output using TextFSM
        parsed_data = parse_output_with_textfsm(command_output, TEXTFSM_TEMPLATE)
        
        if not parsed_data:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö template ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.")
            ch.basic_ack(delivery_tag=method.delivery_tag)
            return

        print(json.dumps(parsed_data, indent=2))
        
        # 4. Save the parsed data to MongoDB
        save_to_mongo(parsed_data, ip)
        print(f"Stored interface status for {ip}")
        
    except json.JSONDecodeError:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse JSON ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ.")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
    finally:
        # 5. Acknowledge the message to RabbitMQ, indicating it's processed
        ch.basic_ack(delivery_tag=method.delivery_tag)
        print("--- ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ---")

# --- ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ---

def start_listening():
    """
    Starts the RabbitMQ consumer to listen for messages in a queue.
    """
    try:
        connection = pika.BlockingConnection(pika.ConnectionParameters(RABBITMQ_HOST))
        channel = connection.channel()
        channel.queue_declare(queue=RABBITMQ_QUEUE)

        print(f" [*] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß '{RABBITMQ_QUEUE}'. ‡∏Å‡∏î CTRL+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å.")
        
        channel.basic_qos(prefetch_count=1)
        channel.basic_consume(queue=RABBITMQ_QUEUE, on_message_callback=on_message_callback)
        channel.start_consuming()
        
    except pika.exceptions.AMQPConnectionError as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö RabbitMQ ‡πÑ‡∏î‡πâ: {e}")
        print("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ RabbitMQ Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á.")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
if __name__ == "__main__":
    INTERVAL = 60.0
    next_run = time.monotonic()
    count = 0

    while True:
        now = time.time()
        now_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(now))
        ms = int((now % 1) * 1000)  
        now_str_with_ms = f"{now_str}.{ms:03d}"
        print(f"[{now_str_with_ms}] run #{count}")
        start_listening()
        count += 1
        next_run += INTERVAL
        time.sleep(max(0.0, next_run - time.monotonic()))